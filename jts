#!/usr/bin/env python3

################ jts (juno timesheet) version 1.2 ######################
##################### Created by Juno Presken ##########################

from datetime import date, time, datetime, timedelta
import sys
import os
import argparse
from colorama import Fore, Back, Style
import csv

###SETTINGS###

default_path = "/home/your/path/here.csv" # replace with the path to the file you wanna use as your timesheet
args = ""
firstPeriod = "09/05/2020" # replace with the date of the end of your first pay period
daily_goal = 2.8571 #number of hours you'd like to work each day
hourly_rate = 14.82 #money you make per hour
periodly_expenses = 206.928167421 #amount of each pay period that's lost to expenses
pay_period = 14 #days per pay period


#ATM the program is hardcoded to assume each pay period is 2 weeks, and that one's goal is to work 2.87 hours per day

dateFormat = "%m/%d/%Y"
timeFormat = "%I:%M%p"
today = datetime.today()
now = datetime.now()

def main():

    get_args()

    with open(args.timeSheet, 'r') as timeSheet:
        punchArray = list(csv.reader(timeSheet, delimiter='\t'))

        if args.clockIn:
            clockIn(punchArray)
        elif args.clockOut:
            clockOut(punchArray)
        if args.day:
            hours = showDay(today, punchArray)
            print("Hours worked today: ", hours)
        if args.period:
            showPeriod(punchArray)
    with open(args.timeSheet, 'w') as timeSheet:
        punchWriter = csv.writer(timeSheet, delimiter='\t')
        punchWriter.writerows(punchArray)

# Return an array conaining all dates between the given days
def datesArray(startDate, endDate, period = 1):
    dates = []
    thisDate = startDate
    while thisDate <= endDate:
        dates.append(thisDate)
        thisDate += timedelta(days=period)
    return dates
        

def showPeriod(punchArray):
    sinceFirstPeriod = (today - datetime.strptime(firstPeriod, dateFormat)).total_seconds() - 86400
    firstDateThisPeriod = today - timedelta(seconds = sinceFirstPeriod % (86400 * pay_period))
    sum = 0
    for day in datesArray(firstDateThisPeriod, today):
        sum += showDay(day, punchArray)
    print("Hours worked this pay period:\t{}".format(round(sum,2)))
    dayNumber = (today - firstDateThisPeriod).days + 1
    hoursShouldBe = dayNumber * daily_goal
    behindSchedule = hoursShouldBe - sum
    if behindSchedule < 0:
        print("Hours ahead of schedule:\t{} ({} days)".format(round(abs(behindSchedule), 2),round(abs(behindSchedule) / daily_goal, 2)))
    else:
        print("Hours behind schedule:\t\t{} ({} days, work til {} to catch up)".format(round(behindSchedule, 2),round(behindSchedule / daily_goal, 2),(datetime.now() + timedelta(hours=behindSchedule)).strftime(timeFormat) ))
    print("Predicted profit so far:\t${} +/- $20.64".format(round(sum * hourly_rate - periodly_expenses,2)))

    
def showDay(thisDay, punchArray):
    sum = 0
    for punch in punchArray:
        if punch[0] == thisDay.strftime(dateFormat):
            for v in punch:
                print(v + "\t", end='')
            if len(punch) < 3:
                endTime = now
                print("(now)\t", end='')
            else:
                endTime = datetime.strptime(punch[2], timeFormat)
            sum += round((endTime - datetime.strptime(punch[1], timeFormat)).total_seconds()/3600,2)
            print(round((endTime - datetime.strptime(punch[1], timeFormat)).total_seconds()/3600,2))
    return sum
        
def clockIn(punchArray):
    if len(punchArray[-1]) < 3:
        print("You're already clocked in")
    else:
        punchArray.append([today.strftime(dateFormat), now.strftime(timeFormat)])
                
def clockOut(punchArray):
    if len(punchArray[-1]) > 2:
        print("You're not clocked in")
    elif (today - datetime.strptime(punchArray[-1][0], dateFormat)).days > 1:
        print("Uh oh, looks like you forgot to clock out last time")
    elif (today - datetime.strptime(punchArray[-1][0], dateFormat)).days == 1:
        print("Shift has straddled a day, adding clock out and clock in and clock out")
        #add clock out at 11:59PM
        punchArray[-1].append(time(23,59).strftime(timeFormat))
        #add clock in at 12:00AM today and clock out now
        punchArray.append([today.strftime(dateFormat), time(0).strftime(timeFormat), now.strftime(timeFormat)])
    else:
        punchArray[-1].append(now.strftime(timeFormat))   
                
def get_args():
    global args
    global firstPeriod
    global dateFormat
    global timeFormat
    global today
    global now

    parser = argparse.ArgumentParser(
        description = "Performs functions on a timesheet CSV")

    parser.add_argument("-i", "--clockIn",
                        action = "store_true",
                        help = "add a new punch in")
    parser.add_argument("-o", "--clockOut",
                        action = "store_true",
                        help = "add a new punch out, report and add hours worked in the session to the file")
    parser.add_argument("-s", "--session",
                        action = "store_true",
                        help = "display stats about current or last work session")
    parser.add_argument("-d", "--day",
                        action = "store_true",
                        help = "display stats about current or last workday")
    parser.add_argument("-p", "--period",
                        action = "store_true",
                        help = "display stats about current pay period")
    parser.add_argument("-f", "--timeSheet",
                        default = default_path,
                        help = "Use specified file instead of the path stored in $TIMESHEET")
    parser.add_argument("-D", "--test_date",
                        default = date.today().strftime(dateFormat),
                        help = "use date instead of today for testing")
    parser.add_argument("-T", "--test_time",
                        default = datetime.now().strftime(timeFormat),
                        help = "use date instead of today for testing")
    args = parser.parse_args()
    today = datetime.strptime(args.test_date, dateFormat)
    now = datetime.strptime(args.test_time, timeFormat)



main()
